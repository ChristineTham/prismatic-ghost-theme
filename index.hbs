{{!< default}}
{{!-- The tag above means: insert everything in this file
into the {body} of the default.hbs template --}}
{{#is "home"}}
    <header id="header" class="animated fadeIn header {{#if @site.cover_image}} cover-image" style="background-image: url({{img_url @site.cover_image size="xl"}});{{/if}}">
        {{#if @site.cover_image}}
                <section class="hero">
            <div class="hero-content">
                <canvas id="logo" width="400" height="100"></canvas>
                <h1 class="site-description animated fadeInUp delay-2"><span class="description">{{@site.description}}</span></h1>
            </div>
        </section>
            {{/if}}
    </header>
{{/is}}

<script src="{{asset "built/leon.js"}}" data-swup-ignore-script></script>
<script data-swup-ignore-script>
    const speed = 5;
    const fps = 5000 / 30;
    const patternWidth = 30;
    const defaultSize = 150;
    const defaultText = "Prismatic Path";
    const PI2 = 2 * Math.PI;
    let cValue = 0, mode;
    let leon, time;

    const pixelRatio = 2;
    let isDown = false, moveX = 0, moveY = 0, offsetX = 0, offsetY = 0;
    let canvas, ctx;
    let renderer, stage;
    let sw = document.body.clientWidth;
    let sh = document.body.clientHeight;

    function generateCanvas() {
        canvas = document.getElementById("logo");
        ctx = canvas.getContext("2d");

        window.addEventListener('resize', canvasResize, false);
        canvasResize();

        moveEvent(canvas);
    }

    function canvasResize() {
        sw = document.body.clientWidth * .9;
        sh = document.body.clientHeight * .2;

        if (sh > defaultSize) sh = defaultSize;

        canvas.width = sw * pixelRatio;
        canvas.height = sh * pixelRatio;
        canvas.style.width = sw + 'px';
        canvas.style.height = sh + 'px';
        ctx.scale(pixelRatio, pixelRatio);
        leon.size = defaultSize;
        if (leon.size > sw / 7) leon.size = sw / 7;
        if (leon.size > sh) leon.size = sh;
        // console.log(leon.size, sw, sh);
    }

    function moveEvent(canvas) {
        const hammer = new Hammer(canvas);
        hammer.add(new Hammer.Pan({direction: Hammer.DIRECTION_ALL, threshold: 0}));
        hammer.on("pan", (e) => {                
            moveX = e.deltaX + offsetX;
            moveY = e.deltaY + offsetY;
            if (e.isFinal) {
                offsetX = moveX;
                offsetY = moveY;
            }
        });
    }

    function init() {
        leon = new LeonSans({
            text: defaultText,
            size: defaultSize,
            weight: 500,
            pathGap: -1,
            isPath: true
        });

        generateCanvas();

        requestAnimationFrame(animate);
    }

    function update() {
        ctx.clearRect(0, 0, sw, sh);
        ctx.lineWidth = 0.5;
        const w = patternWidth * leon.scale;
        const total = leon.data.length;
        let i, p, pos, no = 0; 
        let d, j, j_total;

        for (i = 0; i < total; i++) {
            d = leon.data[i].paths;
            j_total = Math.round(d.length * leon.drawing[i].value);
            for (j = 0; j < j_total; j++) {
                pos = d[j];
                ctx.fillStyle = randomColor(no);
                ctx.strokeStyle = randomColor(no);
                ctx.beginPath();
                ctx.arc(pos.x, pos.y, w, 0, PI2);
                ctx.stroke();
                no += 1;
            }
        }

        cValue -= speed;
    }

    function randomColor(no) {
        return "hsl(" + (no + cValue) + ',' + '70%,' + '50%)';
    }

    function animate(t) {
        requestAnimationFrame(animate);

        const x = 0; // (sw - leon.rect.w) / 2;
        const y = (sh - leon.rect.h) / 2;
        leon.position(x + moveX, y + moveY);

        if (t) {
            if (!time) time = t;
            if (t - time > fps) {
                time = t;
                update();
            }
        }
    }

    window.onload = () => {
        init();
    };

    document.addEventListener('swup:contentReplaced', event => {
        init();
    });
</script>

<div class="post-feed animated fadeIn{{#if @site.cover_image}} delay-3{{/if}}{{#unless @site.cover_image}} delay-1{{/unless}}">
    {{#foreach posts}}

        {{!-- The tag below includes the markup for each post - partials/post-card.hbs --}}
        {{> "post-card"}}

    {{/foreach}}
</div>

