{{!< default}}
{{!-- The tag above means: insert everything in this file
into the {body} of the default.hbs template --}}
 <canvas id="logo" width="100vw" height="25vh"></canvas>

    <script src="{{asset "built/leon.js"}}"></script>
    <script>
        const speed = 5;
        const fps = 5000 / 30;
        const patternWidth = 30;
        const PI2 = 2 * Math.PI;
        let cValue = 0, mode;
        let leon, time;

        const pixelRatio = 2;
        let isDown = false, moveX = 0, moveY = 0, offsetX = 0, offsetY = 0;
        let canvas, ctx;
        let renderer, stage;
        let sw = document.body.clientWidth;
        let sh = document.body.clientHeight / 4;

        function generateCanvas() {
            // canvas = document.createElement('canvas');
            canvas = document.getElementById("logo");
            // document.body.appendChild(canvas);
            ctx = canvas.getContext("2d");

            window.addEventListener('resize', canvasResize, false);
            canvasResize();

            moveEvent(canvas);
        }

        function canvasResize() {
            sw = document.body.clientWidth;
            sh = document.body.clientHeight / 4;

            canvas.width = sw * pixelRatio;
            canvas.height = sh * pixelRatio;
            canvas.style.width = sw + 'px';
            canvas.style.height = sh + 'px';
            ctx.scale(pixelRatio, pixelRatio);
        }

        function moveEvent(canvas) {
            const hammer = new Hammer(canvas);
            hammer.add(new Hammer.Pan({direction: Hammer.DIRECTION_ALL, threshold: 0}));
            hammer.on("pan", (e) => {                
                moveX = e.deltaX + offsetX;
                moveY = e.deltaY + offsetY;
                if (e.isFinal) {
                    offsetX = moveX;
                    offsetY = moveY;
                }
            });
        }


        function getSize(size) {
            let ratio = Math.sqrt(sw * sw + sh * sh) / 1800;
            if (ratio > 1) ratio = 1;
            else if (ratio < 0.5) ratio = 0.5;
            return size * ratio;
        }

        function init() {
            generateCanvas();

            leon = new LeonSans({
                text: 'PrismaticPath',
                size: getSize(200),
                weight: 500,
                pathGap: -1,
                isPath: true
            });

            requestAnimationFrame(animate);
        }

        function update() {
            ctx.clearRect(0, 0, sw, sh);
            ctx.lineWidth = 0.5;
            const w = patternWidth * leon.scale;
            const total = leon.data.length;
            let i, p, pos, no = 0; 
            let d, j, j_total;

            for (i = 0; i < total; i++) {
                d = leon.data[i].paths;
                j_total = Math.round(d.length * leon.drawing[i].value);
                for (j = 0; j < j_total; j++) {
                    pos = d[j];
                    ctx.fillStyle = randomColor(no);
                    ctx.strokeStyle = randomColor(no);
                    ctx.beginPath();
                    ctx.arc(pos.x, pos.y, w, 0, PI2);
                    ctx.stroke();
                    no += 1;
                }
            }

            cValue -= speed;
        }

        function randomColor(no) {
            return "hsl(" + (no + cValue) + ',' + '70%,' + '50%)';
        }

        function animate(t) {
            requestAnimationFrame(animate);

            const x = (sw - leon.rect.w) / 2;
            const y = (sh - leon.rect.h) / 2;
            // const y = (sh - leon.rect.h) * 0;
            leon.position(x + moveX, y + moveY);

            if (t) {
                if (!time) time = t;
                if (t - time > fps) {
                    time = t;
                    update();
                }
            }
        }

        window.onload = () => {
            init();
        };
    </script>